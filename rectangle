#! /usr/bin/python

#  usage: rectangle [options] outfile x_dim y_dim depth tool_diam 
#  assume we start at the surface, at the left lower corner.
#  at the end, the tool returns to the starting point, position is left as
#  absolute, units are left in mm.

import sys, getopt, argparse
import os
import math

parser = argparse.ArgumentParser()

parser.add_argument("outfile", help="output gcode file name")
parser.add_argument("x_dim", help="rectangle x dimension")
parser.add_argument("y_dim", help="rectangle y dimension")
parser.add_argument("depth", help="rectangle depth")
parser.add_argument("tool_diam", help="tool diameter")
parser.add_argument("--f_horiz", default="50",
	help="horizontal feed rate, default=50mm/min")
parser.add_argument("--f_vert", default="10",
	help="vertical feed rate, default=10mm/min")
parser.add_argument("--z_step", default=0.2, 
	help="vertical step, default=0.2mm")
parser.add_argument("--move_h", default="10", 
	help="safe height for lateral moves, default=10mm")
parser.add_argument("--move_f", default="1000", 
	help="feed rate for moves, default=1000mm/min")
parser.add_argument("--overlap", default=0.5, 
	help="tool overlap fraction, default=0.5")

args=parser.parse_args()

#print "outfile=" + args.outfile
#print "x_dim=" + args.x_dim
#print "y_dim=" + args.y_dim
#print "depth=" + args.depth
#print "tool_diam=" + args.tool_diam
#print "f_horiz=" + args.f_horiz
#print "f_vert=" + args.f_vert
#print "z_step=" + str(args.z_step)

n_layers = int(math.ceil( float(args.depth)/float(args.z_step) ))

print str(n_layers) + " layers"

eff_tool_diam = float(args.tool_diam) * (1-float(args.overlap))
x_dim = float(args.x_dim) - float(args.tool_diam)
y_dim = float(args.y_dim) - float(args.tool_diam)

if x_dim >= y_dim:
	# tool moves in rows
	n_x = 1
	n_y = int(math.ceil( y_dim / eff_tool_diam )) 
	eff_tool_diam = y_dim / n_y
	x_len = x_dim
	y_len = eff_tool_diam
	print str(n_y), " rows"
else:
	# tool moves in columns
	n_x = int(math.ceil( x_dim / eff_tool_diam )) 
	n_y = 1
	eff_tool_diam = x_dim / n_x
	x_len = eff_tool_diam
	y_len = y_dim 
	print str(n_x), " columns"

print "effective tool diam = ", str(eff_tool_diam)

gfile = open( args.outfile, 'w' )

# write comments into the G code
gfile.write( "; rectangle \n" )
gfile.write( "; starts in the left lower corner on material surface\n" )
gfile.write( "; returns to the same spot at the end\n" )
gfile.write( "; on exit, the units are mm and positioning is absolute\n" )
gfile.write( "; corners are rounded\n" )
gfile.write( "; x_dim = " + args.x_dim + "\n" ) 
gfile.write( "; y_dim = " + args.y_dim + "\n" ) 
gfile.write( "; depth = " + args.depth + "\n" )
gfile.write( "; tool diam = " + args.tool_diam + "\n" )
gfile.write( "; z_step = " + str(args.z_step) + "\n" )
gfile.write( "; f_horiz = " + args.f_horiz + "\n" )
gfile.write( "; f_vert = " + args.f_vert + "\n" )
gfile.write( "; overlap = " + str(args.overlap) + "\n" )
gfile.write( "; move_h = " + args.move_h + "\n" )
gfile.write( "; move_f = " + args.move_f + "\n" )
gfile.write( "; there are " + str(n_layers) + " layers" + "\n" )
gfile.write( "\n" )

# actual working G code generated below
gfile.write( "G21 ; switch to millimeters"+"\n" )
gfile.write( "G91 ; switch to relative"+"\n" )


for i in range(n_layers):
	gfile.write( "G1 Z-" + str(args.z_step) + " F" + args.f_vert + "\n" ) 
	if n_x == 1: #by rows
		for i in range( n_y ):
			gfile.write( "G1 X" + str(x_len) + " F" + args.f_horiz + "\n" ) 
			x_len = - x_len
			if i < n_y-1:
				gfile.write( "G1 Y" + str(y_len) + " F" + args.f_horiz + "\n" ) 
		y_len = - y_len
	else: #by columns
		for i in range( n_x ):
			gfile.write( "G1 Y" + str(y_len) + " F" + args.f_horiz + "\n" ) 
			y_len = - y_len
			if i < n_x-1:
				gfile.write( "G1 X" + str(x_len) + " F" + args.f_horiz + "\n" ) 
		x_len = - x_len

gfile.write( "G1 Z" + args.depth + " F" + args.move_f + "\n" ) # raise up to surface

x_move = 0
y_move = 0

if x_len < 0:
	if n_x == 1:
		x_move = x_len
	else:
		x_move = -x_dim - x_len
if y_len < 0:
	if n_y == 1:
		y_move = y_len
	else:
		y_move = -y_dim - y_len

if x_move < 0 or y_move < 0:
	gfile.write( "G1" )
	if x_move < 0:
		gfile.write( " X" + str(x_move) )
	if y_move < 0:
		gfile.write( " Y" + str(y_move) )
	gfile.write( " F" + args.move_f + " ; move back to origin\n" )
else:
	gfile.write( "; ended at origin, no need to move back\n" )
gfile.write( "G90 ; switch back to absolute"+"\n" )

gfile.flush()
gfile.close()
